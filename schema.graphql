"""
The `@defer` directive may be provided for fragment spreads and inline fragments
to inform the executor to delay the execution of the current fragment to
indicate deprioritization of the current fragment. A query with `@defer`
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred is
delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this defer directive. This label is intended to give client
  applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """Deferred when true."""
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the
backend can leverage technology such as asynchronous iterators to provide a
partial list in the initial response, and additional list items in subsequent
responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this stream directive. This label is intended to give client
  applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int! = 0

  """Streamed when true."""
  if: Boolean
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """Roles that are allowed to access the annotated resource."""
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is
  executed after the policy has determined that the current user is allowed to
  access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) on SCHEMA | OBJECT | FIELD_DEFINITION

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

enum ActiveStatus {
  ACCEPTED
  REJECTED
  PENDING
  SUSPEND
}

input ActiveStatusOperationFilterInput {
  eq: ActiveStatus
  neq: ActiveStatus
  in: [ActiveStatus!]
  nin: [ActiveStatus!]
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

type ChartDto {
  timeStamp: DateTime!
  total: Int!
}

type ChartDtoCollectionSegment {
  items: [ChartDto]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input ChartDtoFilterInput {
  and: [ChartDtoFilterInput!]
  or: [ChartDtoFilterInput!]
  timeStamp: ComparableDateTimeOperationFilterInput
  total: ComparableInt32OperationFilterInput
}

input ChartDtoSortInput {
  timeStamp: SortEnumType
  total: SortEnumType
}

input ChartInput {
  time: TimeType!
  skillId: Int!
}

"""Information about the offset pagination."""
type CollectionSegmentInfo {
  """
  Indicates whether more items exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more items exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!
}

type Comment {
  text: String
  rate: Int!
  lesson: Lesson
  user: User
  lessonId: Int
  userId: Int!
  replyText: String
  status: CommentStatus!
  skillCategoryId: Int
  skillCategory: SkillCategory
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type CommentCollectionSegment {
  items: [Comment]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input CommentFilterInput {
  and: [CommentFilterInput!]
  or: [CommentFilterInput!]
  text: StringOperationFilterInput
  rate: ComparableInt32OperationFilterInput
  lesson: LessonFilterInput
  user: UserFilterInput
  lessonId: ComparableNullableOfInt32OperationFilterInput
  userId: ComparableInt32OperationFilterInput
  replyText: StringOperationFilterInput
  status: CommentStatusOperationFilterInput
  skillCategoryId: ComparableNullableOfInt32OperationFilterInput
  skillCategory: SkillCategoryFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input CommentInput {
  text: String
  rate: Int!
  lessonId: Int!
}

input CommentSortInput {
  text: SortEnumType
  rate: SortEnumType
  lesson: LessonSortInput
  user: UserSortInput
  lessonId: SortEnumType
  userId: SortEnumType
  replyText: SortEnumType
  status: SortEnumType
  skillCategoryId: SortEnumType
  skillCategory: SkillCategorySortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

enum CommentStatus {
  IN_PREGRESS
  ACCEPTED
}

input CommentStatusOperationFilterInput {
  eq: CommentStatus
  neq: CommentStatus
  in: [CommentStatus!]
  nin: [CommentStatus!]
}

type Company {
  title: String
  iconUrl: String
  jobs: [Job]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type CompanyCollectionSegment {
  items: [Company]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input CompanyFilterInput {
  and: [CompanyFilterInput!]
  or: [CompanyFilterInput!]
  title: StringOperationFilterInput
  iconUrl: StringOperationFilterInput
  jobs: ListFilterInputTypeOfJobFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input CompanyInput {
  title: String
  iconUrl: String
}

input CompanySortInput {
  title: SortEnumType
  iconUrl: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableDoubleOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

type ConsultForm {
  name: String
  email: String
  phoneNumber: String
  address: String
  text: String
  user: User
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type ConsultFormCollectionSegment {
  items: [ConsultForm]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input ConsultFormFilterInput {
  and: [ConsultFormFilterInput!]
  or: [ConsultFormFilterInput!]
  name: StringOperationFilterInput
  email: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  address: StringOperationFilterInput
  text: StringOperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input ConsultFormInput {
  name: String
  email: String
  phoneNumber: String
  address: String
  text: String
}

input ConsultFormSortInput {
  name: SortEnumType
  email: SortEnumType
  phoneNumber: SortEnumType
  address: SortEnumType
  text: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type ConversationDto {
  subject: String
  userId: Int!
  userEmail: String
  conversationId: Int!
  user: User
  unreadCount: Int!
  latestMessageDate: DateTime!
}

type ConversationDtoCollectionSegment {
  items: [ConversationDto]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input ConversationDtoFilterInput {
  and: [ConversationDtoFilterInput!]
  or: [ConversationDtoFilterInput!]
  subject: StringOperationFilterInput
  userId: ComparableInt32OperationFilterInput
  userEmail: StringOperationFilterInput
  conversationId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  unreadCount: ComparableInt32OperationFilterInput
  latestMessageDate: ComparableDateTimeOperationFilterInput
}

input ConversationDtoSortInput {
  subject: SortEnumType
  userId: SortEnumType
  userEmail: SortEnumType
  conversationId: SortEnumType
  user: UserSortInput
  unreadCount: SortEnumType
  latestMessageDate: SortEnumType
}

type Conversations {
  subject: String
  firstUserId: Int!
  firstUser: User
  secondUserId: Int!
  secondUser: User
  firstUnreadCount: Int!
  secondUnreadCount: Int!
  latestMessageDate: DateTime!
  messages: [Messages]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type ConversationsCollectionSegment {
  items: [Conversations]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input ConversationsFilterInput {
  and: [ConversationsFilterInput!]
  or: [ConversationsFilterInput!]
  subject: StringOperationFilterInput
  firstUserId: ComparableInt32OperationFilterInput
  firstUser: UserFilterInput
  secondUserId: ComparableInt32OperationFilterInput
  secondUser: UserFilterInput
  firstUnreadCount: ComparableInt32OperationFilterInput
  secondUnreadCount: ComparableInt32OperationFilterInput
  latestMessageDate: ComparableDateTimeOperationFilterInput
  messages: ListFilterInputTypeOfMessagesFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input ConversationsSortInput {
  subject: SortEnumType
  firstUserId: SortEnumType
  firstUser: UserSortInput
  secondUserId: SortEnumType
  secondUser: UserSortInput
  firstUnreadCount: SortEnumType
  secondUnreadCount: SortEnumType
  latestMessageDate: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type CourseDto {
  id: Int!
  title: String
  iconUrl: String
  rate: Int!
  lessons: [LessonDto]
}

input CreateAdminInput {
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  roleIds: [Int!]
  firebaseToken: String
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

enum Education {
  ALL
  HIGH_SCHOOL
  ASSOCIATE
  BACHELOR
  MASTER
  DOCTORAL
}

input EducationOperationFilterInput {
  eq: Education
  neq: Education
  in: [Education!]
  nin: [Education!]
}

enum ExperienceLevel {
  ALL
  JUNIOR
  MID
  SENIOR
  ENTRY
  NO_EXPERIENCE
}

input ExperienceLevelOperationFilterInput {
  eq: ExperienceLevel
  neq: ExperienceLevel
  in: [ExperienceLevel!]
  nin: [ExperienceLevel!]
}

type InterviewCategory {
  title: String
  interviewQuestions: [InterviewQuestion]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type InterviewCategoryCollectionSegment {
  items: [InterviewCategory]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input InterviewCategoryFilterInput {
  and: [InterviewCategoryFilterInput!]
  or: [InterviewCategoryFilterInput!]
  title: StringOperationFilterInput
  interviewQuestions: ListFilterInputTypeOfInterviewQuestionFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input InterviewCategoryInput {
  title: String
}

input InterviewCategorySortInput {
  title: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type InterviewQuestion {
  title: String
  description: String
  interviewCategory: InterviewCategory
  interviewCategoryId: Int!
  userInterviewQuestions: [UserInterviewQuestion]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type InterviewQuestionCollectionSegment {
  items: [InterviewQuestion]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input InterviewQuestionFilterInput {
  and: [InterviewQuestionFilterInput!]
  or: [InterviewQuestionFilterInput!]
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  interviewCategory: InterviewCategoryFilterInput
  interviewCategoryId: ComparableInt32OperationFilterInput
  userInterviewQuestions: ListFilterInputTypeOfUserInterviewQuestionFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input InterviewQuestionInput {
  title: String
  description: String
  interviewCategoryId: Int!
}

input InterviewQuestionSortInput {
  title: SortEnumType
  description: SortEnumType
  interviewCategory: InterviewCategorySortInput
  interviewCategoryId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type Job {
  title: String
  jobType: JobType!
  experienceLevel: ExperienceLevel!
  education: Education!
  salary: Float!
  country: String
  city: String
  description: String
  jobCategory: JobCategory
  company: Company
  jobSkills: [JobSkill]
  jobRequests: [JobRequest]
  userFavoriteJobs: [UserFavoriteJob]
  jobCategoryId: Int!
  companyId: Int!
  status: ShowStatus!
  isLike: Boolean!
  isApplied: Boolean!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type JobCategory {
  title: String
  viewCount: Int!
  jobs: [Job]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type JobCategoryCollectionSegment {
  items: [JobCategory]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input JobCategoryFilterInput {
  and: [JobCategoryFilterInput!]
  or: [JobCategoryFilterInput!]
  title: StringOperationFilterInput
  viewCount: ComparableInt32OperationFilterInput
  jobs: ListFilterInputTypeOfJobFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input JobCategoryInput {
  title: String
}

input JobCategorySortInput {
  title: SortEnumType
  viewCount: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type JobCollectionSegment {
  items: [Job]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input JobFilterInput {
  and: [JobFilterInput!]
  or: [JobFilterInput!]
  title: StringOperationFilterInput
  jobType: JobTypeOperationFilterInput
  experienceLevel: ExperienceLevelOperationFilterInput
  education: EducationOperationFilterInput
  salary: ComparableDoubleOperationFilterInput
  country: StringOperationFilterInput
  city: StringOperationFilterInput
  description: StringOperationFilterInput
  jobCategory: JobCategoryFilterInput
  company: CompanyFilterInput
  jobSkills: ListFilterInputTypeOfJobSkillFilterInput
  jobRequests: ListFilterInputTypeOfJobRequestFilterInput
  userFavoriteJobs: ListFilterInputTypeOfUserFavoriteJobFilterInput
  jobCategoryId: ComparableInt32OperationFilterInput
  companyId: ComparableInt32OperationFilterInput
  status: ShowStatusOperationFilterInput
  isLike: BooleanOperationFilterInput
  isApplied: BooleanOperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input JobInput {
  title: String
  jobType: Int
  experienceLevel: Int
  education: Int
  salary: Float
  country: String
  city: String
  description: String
  jobCategoryId: Int
  companyId: Int
}

type JobRequest {
  status: JobStatus!
  job: Job
  user: User
  jobId: Int!
  userId: Int!
  cVFileUrl: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type JobRequestCollectionSegment {
  items: [JobRequest]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input JobRequestFilterInput {
  and: [JobRequestFilterInput!]
  or: [JobRequestFilterInput!]
  status: JobStatusOperationFilterInput
  job: JobFilterInput
  user: UserFilterInput
  jobId: ComparableInt32OperationFilterInput
  userId: ComparableInt32OperationFilterInput
  cVFileUrl: StringOperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input JobRequestInput {
  jobId: Int!
  cVFileUrl: String
}

input JobRequestSortInput {
  status: SortEnumType
  job: JobSortInput
  user: UserSortInput
  jobId: SortEnumType
  userId: SortEnumType
  cVFileUrl: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type JobSkill {
  skill: Skill
  job: Job
  skillId: Int!
  jobId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type JobSkillCollectionSegment {
  items: [JobSkill]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input JobSkillFilterInput {
  and: [JobSkillFilterInput!]
  or: [JobSkillFilterInput!]
  skill: SkillFilterInput
  job: JobFilterInput
  skillId: ComparableInt32OperationFilterInput
  jobId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input JobSkillInput {
  skillId: Int!
  jobId: Int!
}

input JobSkillSortInput {
  skill: SkillSortInput
  job: JobSortInput
  skillId: SortEnumType
  jobId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input JobSortInput {
  title: SortEnumType
  jobType: SortEnumType
  experienceLevel: SortEnumType
  education: SortEnumType
  salary: SortEnumType
  country: SortEnumType
  city: SortEnumType
  description: SortEnumType
  jobCategory: JobCategorySortInput
  company: CompanySortInput
  jobCategoryId: SortEnumType
  companyId: SortEnumType
  status: SortEnumType
  isLike: SortEnumType
  isApplied: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

enum JobStatus {
  PENDING
  ACCEPTED
  NOT_QUALIFIED
  INTERVIEW
}

input JobStatusInput {
  id: Int!
  status: ShowStatus!
}

input JobStatusOperationFilterInput {
  eq: JobStatus
  neq: JobStatus
  in: [JobStatus!]
  nin: [JobStatus!]
}

enum JobType {
  ALL
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERSHIP
  TEMPORARY
}

input JobTypeOperationFilterInput {
  eq: JobType
  neq: JobType
  in: [JobType!]
  nin: [JobType!]
}

type Lesson {
  title: String
  description: String
  time: Int!
  skillCategoryId: Int!
  topics: [Topic]
  comments: [Comment]
  skillCategory: SkillCategory
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type LessonCollectionSegment {
  items: [Lesson]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type LessonDto {
  id: Int!
  title: String
  description: String
  skillCategoryId: Int!
  time: Int!
  totalTopicViewd: Int!
  topics: [Topic]
  comments: [Comment]
}

input LessonFilterInput {
  and: [LessonFilterInput!]
  or: [LessonFilterInput!]
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  time: ComparableInt32OperationFilterInput
  skillCategoryId: ComparableInt32OperationFilterInput
  topics: ListFilterInputTypeOfTopicFilterInput
  comments: ListFilterInputTypeOfCommentFilterInput
  skillCategory: SkillCategoryFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input LessonInput {
  title: String
  description: String
  skillCategoryId: Int!
  time: Int!
}

input LessonSortInput {
  title: SortEnumType
  description: SortEnumType
  time: SortEnumType
  skillCategoryId: SortEnumType
  skillCategory: SkillCategorySortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input ListFilterInputTypeOfCommentFilterInput {
  all: CommentFilterInput
  none: CommentFilterInput
  some: CommentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfConsultFormFilterInput {
  all: ConsultFormFilterInput
  none: ConsultFormFilterInput
  some: ConsultFormFilterInput
  any: Boolean
}

input ListFilterInputTypeOfInterviewQuestionFilterInput {
  all: InterviewQuestionFilterInput
  none: InterviewQuestionFilterInput
  some: InterviewQuestionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJobFilterInput {
  all: JobFilterInput
  none: JobFilterInput
  some: JobFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJobRequestFilterInput {
  all: JobRequestFilterInput
  none: JobRequestFilterInput
  some: JobRequestFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJobSkillFilterInput {
  all: JobSkillFilterInput
  none: JobSkillFilterInput
  some: JobSkillFilterInput
  any: Boolean
}

input ListFilterInputTypeOfLessonFilterInput {
  all: LessonFilterInput
  none: LessonFilterInput
  some: LessonFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMessagesFilterInput {
  all: MessagesFilterInput
  none: MessagesFilterInput
  some: MessagesFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSkillFilterInput {
  all: SkillFilterInput
  none: SkillFilterInput
  some: SkillFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSkillQuestionFilterInput {
  all: SkillQuestionFilterInput
  none: SkillQuestionFilterInput
  some: SkillQuestionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSkillQuestionOptionFilterInput {
  all: SkillQuestionOptionFilterInput
  none: SkillQuestionOptionFilterInput
  some: SkillQuestionOptionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTopicFilterInput {
  all: TopicFilterInput
  none: TopicFilterInput
  some: TopicFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserCertificateFilterInput {
  all: UserCertificateFilterInput
  none: UserCertificateFilterInput
  some: UserCertificateFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserCourseFilterInput {
  all: UserCourseFilterInput
  none: UserCourseFilterInput
  some: UserCourseFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserCourseHistoryFilterInput {
  all: UserCourseHistoryFilterInput
  none: UserCourseHistoryFilterInput
  some: UserCourseHistoryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserEducationFilterInput {
  all: UserEducationFilterInput
  none: UserEducationFilterInput
  some: UserEducationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFavoriteJobFilterInput {
  all: UserFavoriteJobFilterInput
  none: UserFavoriteJobFilterInput
  some: UserFavoriteJobFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserInterviewQuestionFilterInput {
  all: UserInterviewQuestionFilterInput
  none: UserInterviewQuestionFilterInput
  some: UserInterviewQuestionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserProfessionalSkillFilterInput {
  all: UserProfessionalSkillFilterInput
  none: UserProfessionalSkillFilterInput
  some: UserProfessionalSkillFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserRoleFilterInput {
  all: UserRoleFilterInput
  none: UserRoleFilterInput
  some: UserRoleFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserSkillFilterInput {
  all: UserSkillFilterInput
  none: UserSkillFilterInput
  some: UserSkillFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserTopicViewedFilterInput {
  all: UserTopicViewedFilterInput
  none: UserTopicViewedFilterInput
  some: UserTopicViewedFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserWorkExperienceFilterInput {
  all: UserWorkExperienceFilterInput
  none: UserWorkExperienceFilterInput
  some: UserWorkExperienceFilterInput
  any: Boolean
}

type ListResponseBaseOfChartDto {
  result(skip: Int, take: Int, where: ChartDtoFilterInput, order: [ChartDtoSortInput!]): ChartDtoCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfComment {
  result(skip: Int, take: Int, where: CommentFilterInput, order: [CommentSortInput!]): CommentCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfCompany {
  result(skip: Int, take: Int, where: CompanyFilterInput, order: [CompanySortInput!]): CompanyCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfConsultForm {
  result(skip: Int, take: Int, where: ConsultFormFilterInput, order: [ConsultFormSortInput!]): ConsultFormCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfConversationDto {
  result(skip: Int, take: Int, where: ConversationDtoFilterInput, order: [ConversationDtoSortInput!]): ConversationDtoCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfConversations {
  result(skip: Int, take: Int, where: ConversationsFilterInput, order: [ConversationsSortInput!]): ConversationsCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfInterviewCategory {
  result(skip: Int, take: Int, where: InterviewCategoryFilterInput, order: [InterviewCategorySortInput!]): InterviewCategoryCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfInterviewQuestion {
  result(skip: Int, take: Int, where: InterviewQuestionFilterInput, order: [InterviewQuestionSortInput!]): InterviewQuestionCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfJob {
  result(skip: Int, take: Int, where: JobFilterInput, order: [JobSortInput!]): JobCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfJobCategory {
  result(skip: Int, take: Int, where: JobCategoryFilterInput, order: [JobCategorySortInput!]): JobCategoryCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfJobRequest {
  result(skip: Int, take: Int, where: JobRequestFilterInput, order: [JobRequestSortInput!]): JobRequestCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfJobSkill {
  result(skip: Int, take: Int, where: JobSkillFilterInput, order: [JobSkillSortInput!]): JobSkillCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfLesson {
  result(skip: Int, take: Int, where: LessonFilterInput, order: [LessonSortInput!]): LessonCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfMessages {
  result(skip: Int, take: Int, where: MessagesFilterInput, order: [MessagesSortInput!]): MessagesCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfReport {
  result(skip: Int, take: Int, where: ReportFilterInput, order: [ReportSortInput!]): ReportCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfRole {
  result(skip: Int, take: Int, where: RoleFilterInput, order: [RoleSortInput!]): RoleCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfSettings {
  result(skip: Int, take: Int, where: SettingsFilterInput, order: [SettingsSortInput!]): SettingsCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfSkill {
  result(skip: Int, take: Int, where: SkillFilterInput, order: [SkillSortInput!]): SkillCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfSkillCategory {
  result(skip: Int, take: Int, where: SkillCategoryFilterInput, order: [SkillCategorySortInput!]): SkillCategoryCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfSkillDto {
  result(skip: Int, take: Int, where: SkillDtoFilterInput, order: [SkillDtoSortInput!]): SkillDtoCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfSkillQuestion {
  result(skip: Int, take: Int, where: SkillQuestionFilterInput, order: [SkillQuestionSortInput!]): SkillQuestionCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfTopic {
  result(skip: Int, take: Int, where: TopicFilterInput, order: [TopicSortInput!]): TopicCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUser {
  result(skip: Int, take: Int, where: UserFilterInput, order: [UserSortInput!]): UserCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserBadge {
  result(skip: Int, take: Int, where: UserBadgeFilterInput, order: [UserBadgeSortInput!]): UserBadgeCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserCertificate {
  result(skip: Int, take: Int, where: UserCertificateFilterInput, order: [UserCertificateSortInput!]): UserCertificateCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserCourse {
  result(skip: Int, take: Int, where: UserCourseFilterInput, order: [UserCourseSortInput!]): UserCourseCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserCourseHistory {
  result(skip: Int, take: Int, where: UserCourseHistoryFilterInput, order: [UserCourseHistorySortInput!]): UserCourseHistoryCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserEducation {
  result(skip: Int, take: Int, where: UserEducationFilterInput, order: [UserEducationSortInput!]): UserEducationCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserFavoriteJob {
  result(skip: Int, take: Int, where: UserFavoriteJobFilterInput, order: [UserFavoriteJobSortInput!]): UserFavoriteJobCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserInterviewQuestion {
  result(skip: Int, take: Int, where: UserInterviewQuestionFilterInput, order: [UserInterviewQuestionSortInput!]): UserInterviewQuestionCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserProfessionalSkill {
  result(skip: Int, take: Int, where: UserProfessionalSkillFilterInput, order: [UserProfessionalSkillSortInput!]): UserProfessionalSkillCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserSkill {
  result(skip: Int, take: Int, where: UserSkillFilterInput, order: [UserSkillSortInput!]): UserSkillCollectionSegment
  status: ResponseStatus!
}

type ListResponseBaseOfUserWorkExperience {
  result(skip: Int, take: Int, where: UserWorkExperienceFilterInput, order: [UserWorkExperienceSortInput!]): UserWorkExperienceCollectionSegment
  status: ResponseStatus!
}

enum LoginType {
  GOOGLE
  FACE_BOOK
  NONE
}

input MessageInput {
  subject: String
  messageType: MessageType!
  photoUrl: String
  conversationId: Int
  receiverId: Int
  text: String
}

type Messages {
  messageType: MessageType!
  photoUrl: String
  createdAt: DateTime!
  conversationId: Int!
  conversation: Conversations
  senderId: Int!
  sender: User
  text: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type MessagesCollectionSegment {
  items: [Messages]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input MessagesFilterInput {
  and: [MessagesFilterInput!]
  or: [MessagesFilterInput!]
  messageType: MessageTypeOperationFilterInput
  photoUrl: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  conversationId: ComparableInt32OperationFilterInput
  conversation: ConversationsFilterInput
  senderId: ComparableInt32OperationFilterInput
  sender: UserFilterInput
  text: StringOperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input MessagesSortInput {
  messageType: SortEnumType
  photoUrl: SortEnumType
  createdAt: SortEnumType
  conversationId: SortEnumType
  conversation: ConversationsSortInput
  senderId: SortEnumType
  sender: UserSortInput
  text: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

enum MessageType {
  TEXT
  PHOTO
  VIDEO
  VOICE
  FILE
}

input MessageTypeOperationFilterInput {
  eq: MessageType
  neq: MessageType
  in: [MessageType!]
  nin: [MessageType!]
}

type Mutation {
  user_signUp(registerInput: RegisterInput): ResponseBaseOfUser
  user_updateProfile(input: UserInput): ResponseBaseOfUser
  user_deleteAccount: ResponseBase
  user_suspendAccount(userId: Int!): ResponseBase
  user_resumeAccount(userId: Int!): ResponseBase
  user_createAdmin(input: CreateAdminInput): ResponseBaseOfUser
  user_updateAdmin(id: Int!, input: UpdateAdminInput): ResponseBaseOfUser
  user_deleteAdmin(id: Int!): ResponseBase
  create(input: ReportInput): ResponseBaseOfReport
  delete(entityId: Int!): ResponseBase
  update(input: ReportInput): ResponseBaseOfReport
  userEducation_add(input: UserEducationInput): ResponseBaseOfUserEducation
  userEducation_update(id: Int!, input: UserEducationInput): ResponseBaseOfUserEducation
  userWorkExperience_add(input: UserWorkExperienceInput): ResponseBaseOfUserWorkExperience
  userWorkExperience_update(id: Int!, input: UserWorkExperienceInput): ResponseBaseOfUserWorkExperience
  userProfessionalSkill_addSkills(input: UserProfessionalSkillInput): ResponseBaseOfUserProfessionalSkill
  userProfessionalSkill_deleteSkills(id: Int!): ResponseBase
  userCertificate_add(input: UserCertificateInput): ResponseBaseOfUserCertificate
  userCertificate_update(id: Int!, input: UserCertificateInput): ResponseBaseOfUserCertificate
  skillCategory_addSkillCategory(input: SkillCategoryInput): ResponseBaseOfSkillCategory
  skillCategory_updateSkillCategory(id: Int!, input: SkillCategoryInput): ResponseBaseOfSkillCategory
  skillCategory_deleteSkillCategory(id: Int!): ResponseBase
  skill_addSkill(input: SkillInput): ResponseBaseOfSkill
  skill_updateSkill(id: Int!, input: SkillInput): ResponseBaseOfSkill
  skill_deleteSkill(id: Int!): ResponseBase
  skill_addSkillOfDay(skillId: Int!): ResponseBase
  skill_removeSkillOfDay(skillId: Int!): ResponseBase
  skill_removeAllSkillOfDay(skillIds: [Int!]): ResponseBase
  userSkill_addInterestedSkills(ids: [Int!]): ListResponseBaseOfUserSkill
  lesson_addLesson(input: LessonInput): ResponseBaseOfLesson
  lesson_updateLesson(id: Int!, input: LessonInput): ResponseBaseOfLesson
  lesson_deleteLesson(id: Int!): ResponseBase
  topic_addTopic(input: TopicInput): ResponseBaseOfTopic
  topic_updateTopic(id: Int!, input: TopicInput): ResponseBaseOfTopic
  topic_deleteTopic(id: Int!): ResponseBase
  topic_addViewedTopic(topicId: Int!): ResponseBase
  topic_saveTopic(topicId: Int!): ResponseBase
  comment_addComment(input: CommentInput): ResponseBaseOfComment
  comment_updateComment(id: Int!, input: UpdateCommentInput): ResponseBaseOfComment
  comment_deleteComment(id: Int!): ResponseBase
  userCourse_add(skillCategoryId: Int!): ResponseBase
  userCourse_updateStatusToCompleted(skillCategoryId: Int!): ResponseBase
  company_addCompany(input: CompanyInput): ResponseBaseOfCompany
  company_updateCompany(id: Int!, input: CompanyInput): ResponseBaseOfCompany
  company_deleteCompany(id: Int!): ResponseBase
  jobCategory_addJobCategory(input: JobCategoryInput): ResponseBaseOfJobCategory
  jobCategory_updateJobCategory(id: Int!, input: JobCategoryInput): ResponseBaseOfJobCategory
  jobCategory_deleteJobCategory(id: Int!): ResponseBase
  jobCategory_updateViewCount(id: Int!): ResponseBase
  job_addJob(input: JobInput): ResponseBaseOfJob
  job_updateJob(id: Int!, input: JobInput): ResponseBaseOfJob
  job_deleteJob(id: Int!): ResponseBase
  job_changeStatus(input: JobStatusInput): ResponseBase
  jobRequest_applyJobRequest(input: JobRequestInput): ResponseBaseOfJobRequest
  jobRequest_deleteJobRequest(id: Int!): ResponseBase
  jobRequest_setStatusJobRequest(input: SetStatusJobRequestInput): ResponseBase
  jobSkill_addJobSkill(input: JobSkillInput): ResponseBaseOfJobSkill
  jobSkill_updateJobSkill(id: Int!, input: JobSkillInput): ResponseBaseOfJobSkill
  jobSkill_deleteJobSkill(id: Int!): ResponseBase
  userFavoriteJob_addOrRemoveFavorite(input: UserFavoriteJobInput): ResponseBase
  message_createMessage(messageInput: MessageInput): ResponseBaseOfMessages
  message_removeConversation(conversationId: Int!): ResponseBase
  message_deleteMessage(messageId: Int!): ResponseBaseOfMessages
  userCourseHistory_add(skillCategoryId: Int!): ResponseBase
  interviewCategory_addCategory(input: InterviewCategoryInput): ResponseBaseOfInterviewCategory
  interviewCategory_updateCategory(id: Int!, input: InterviewCategoryInput): ResponseBaseOfInterviewCategory
  interviewCategory_deleteCategory(id: Int!): ResponseBase
  interviewQuestion_addQuestion(input: InterviewQuestionInput): ResponseBaseOfInterviewQuestion
  interviewQuestion_updateQuestion(id: Int!, input: InterviewQuestionInput): ResponseBaseOfInterviewQuestion
  interviewQuestion_deleteQuestion(id: Int!): ResponseBase
  userInterviewQuestion_add(input: UserInterviewQuestionInput): ResponseBaseOfUserInterviewQuestion
  userInterviewQuestion_delete(id: Int!): ResponseBase
  consult_addConsultForm(input: ConsultFormInput): ResponseBaseOfConsultForm
  skillQuestion_addQuestion(input: SkillQuestionInput): ResponseBaseOfSkillQuestion
  skillQuestion_updateQuestion(id: Int!, input: SkillQuestionInput): ResponseBaseOfSkillQuestion
  skillQuestion_deleteQuestion(id: Int!): ResponseBase
  settings_update(input: SettingsInput): ResponseBaseOfSettings
  userBadge_add(input: UserBadgeInput): ResponseBaseOfUserBadge
  report_addReport(iMEI: String): ResponseBaseOfReport
}

type Query {
  user_login: SingleResponseBaseOfUser
  user_getUser(userId: Int!): SingleResponseBaseOfUser
  user_getUsers: ListResponseBaseOfUser
  user_getProfile: SingleResponseBaseOfUser
  user_getTopUsers: ListResponseBaseOfUser
  user_getReportBoxes: ResponseBaseOfReportBoxDto
  user_getChart(input: ChartInput): ListResponseBaseOfChartDto
  user_signIn: ResponseBaseOfUser
  get(entityId: Int!): ResponseBaseOfReport
  usereEucation_getUserEducations: ListResponseBaseOfUserEducation
  usereEucation_getAllUserEducations(userId: Int!): ListResponseBaseOfUserEducation
  items: ListResponseBaseOfUserBadge
  userWorkExperience_getUserWorkExperiences: ListResponseBaseOfUserWorkExperience
  userWorkExperience_getAllUserWorkExperiences(userId: Int!): ListResponseBaseOfUserWorkExperience
  userProfessionalSkill_getProfessionalSkills: ListResponseBaseOfUserProfessionalSkill
  userProfessionalSkill_getAllProfessionalSkills(userId: Int!): ListResponseBaseOfUserProfessionalSkill
  usercertificate_getUserCertificates: ListResponseBaseOfUserCertificate
  usercertificate_getAllUserCertificates(userId: Int!): ListResponseBaseOfUserCertificate
  skillcategory_getSkillCategory(skillCategoryId: Int!): SingleResponseBaseOfSkillCategory
  skillcategory_getSkillCategories: ListResponseBaseOfSkillCategory
  skill_getPopularCategorySkills: ListResponseBaseOfSkillCategory
  skill_getCategoryById(skillCategoryId: Int!): ResponseBaseOfCourseDto
  skillcategory_getSkillCategories_homePage: ListResponseBaseOfSkillCategory
  skill_getSkill(skillId: Int!): SingleResponseBaseOfSkill
  skill_getSkills: ListResponseBaseOfSkill
  skill_getRecommendedSkills: ListResponseBaseOfSkillDto
  skill_getPopularSkills: ListResponseBaseOfSkill
  skill_getSkillPercentage(skillId: Int!): ResponseBaseOfSkillLevelDto
  skill_getSkillsOfDay: ListResponseBaseOfSkill
  skill_getSkills_homePage: ListResponseBaseOfSkill
  userskill_getUserSkills: ListResponseBaseOfUserSkill
  userskill_getAllUserSkills(userId: Int!): ListResponseBaseOfUserSkill
  lesson_getLesson(lessonId: Int!): SingleResponseBaseOfLesson
  lesson_getLessons: ListResponseBaseOfLesson
  topic_getTopic(topicId: Int!): SingleResponseBaseOfTopic
  topic_getTopics: ListResponseBaseOfTopic
  topic_savedTopics: ListResponseBaseOfTopic
  comment_getComment(commentId: Int!): SingleResponseBaseOfComment
  comment_getComments: ListResponseBaseOfComment
  usercourse_getUserCourses: ListResponseBaseOfUserCourse
  usercourse_getAllUserCourses(userId: Int!): ListResponseBaseOfUserCourse
  company_getCompany(companyId: Int!): ResponseBaseOfCompany
  company_getCompanies: ListResponseBaseOfCompany
  jobcategory_getJobCategory(jobcategoryId: Int!): ResponseBaseOfJobCategory
  jobcategory_getJobCategories: ListResponseBaseOfJobCategory
  job_getJob(jobId: Int!): ResponseBaseOfJob
  job_getJobs: ListResponseBaseOfJob
  job_getAllActiveJobs: ListResponseBaseOfJob
  job_getFollowedJobs: ListResponseBaseOfJob
  jobSkill_getJobSkill(jobskillId: Int!): SingleResponseBaseOfJobSkill
  jobSkill_getJobSkills: ListResponseBaseOfJobSkill
  jobSkill_getJobSkilsByJobId(jobId: Int!): ListResponseBaseOfJobSkill
  jobRequest_getJobRequest(jobRequestId: Int!): SingleResponseBaseOfJobRequest
  jobRequest_getJobRequests: ListResponseBaseOfJobRequest
  jobRequest_getJobRequestsJobCurrentUser: ListResponseBaseOfJobRequest
  userfavoritejob_getExistFavoiteJob(jobId: Int!): ResponseBaseOfUserFavoriteJob
  userCourseHistory_getAllCourses: ListResponseBaseOfUserCourseHistory
  message_getConversation(conversationId: Int!): ListResponseBaseOfMessages
  message_getUserMessages: ListResponseBaseOfConversationDto
  message_getConversationForUser(otherUserId: Int!): ResponseBaseOfConversations
  message_getAllMessages: ListResponseBaseOfConversations
  message_getFullConversation(conversationId: Int!): ListResponseBaseOfMessages
  interviewCategory_getInterviewCategory(interviewCategoryId: Int!): SingleResponseBaseOfInterviewCategory
  interviewCategory_getInterviewCategories: ListResponseBaseOfInterviewCategory
  interviewQuestion_getInterviewQuestion(interviewQuestionId: Int!): SingleResponseBaseOfInterviewQuestion
  interviewQuestion_getInterviewQuestions: ListResponseBaseOfInterviewQuestion
  userInterviewQuestion_getAllByUserId(userId: Int!): ListResponseBaseOfUserInterviewQuestion
  consult_getConsultForm(consultFormId: Int!): SingleResponseBaseOfConsultForm
  consult_getConsultForms: ListResponseBaseOfConsultForm
  skillQuestion_getSkillQuestion(skillQuestionId: Int!): SingleResponseBaseOfSkillQuestion
  skillQuestion_getSkillQuestions: ListResponseBaseOfSkillQuestion
  skillQuestion_getQuestionsRandom(skillId: Int!): ListResponseBaseOfSkillQuestion
  settings_getSetting(settingId: Int!): SingleResponseBaseOfSettings
  settings_getSettings: ListResponseBaseOfSettings
  userBadge_getBadges: ListResponseBaseOfUserBadge
  userBadge_getBadgesByUserId(userId: Int!): ListResponseBaseOfUserBadge
  role_getRoles: ListResponseBaseOfRole
  report_getReports: ListResponseBaseOfReport
  report_getChartViewApp: ListResponseBaseOfChartDto
}

input RegisterInput {
  loginType: LoginType!
  userType: UserType!
  name: String
}

type Report {
  iMEI: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type ReportBoxDto {
  totalCourses: Int!
  totalJobs: Int!
  totalUsers: Int!
  totalSkills: Int!
}

type ReportCollectionSegment {
  items: [Report]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input ReportFilterInput {
  and: [ReportFilterInput!]
  or: [ReportFilterInput!]
  iMEI: StringOperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input ReportInput {
  iMEI: String
}

input ReportSortInput {
  iMEI: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type ResponseBase {
  status: ResponseStatus!
}

type ResponseBaseOfComment {
  result: Comment
  status: ResponseStatus!
}

type ResponseBaseOfCompany {
  result: Company
  status: ResponseStatus!
}

type ResponseBaseOfConsultForm {
  result: ConsultForm
  status: ResponseStatus!
}

type ResponseBaseOfConversations {
  result: Conversations
  status: ResponseStatus!
}

type ResponseBaseOfCourseDto {
  result: CourseDto
  status: ResponseStatus!
}

type ResponseBaseOfInterviewCategory {
  result: InterviewCategory
  status: ResponseStatus!
}

type ResponseBaseOfInterviewQuestion {
  result: InterviewQuestion
  status: ResponseStatus!
}

type ResponseBaseOfJob {
  result: Job
  status: ResponseStatus!
}

type ResponseBaseOfJobCategory {
  result: JobCategory
  status: ResponseStatus!
}

type ResponseBaseOfJobRequest {
  result: JobRequest
  status: ResponseStatus!
}

type ResponseBaseOfJobSkill {
  result: JobSkill
  status: ResponseStatus!
}

type ResponseBaseOfLesson {
  result: Lesson
  status: ResponseStatus!
}

type ResponseBaseOfMessages {
  result: Messages
  status: ResponseStatus!
}

type ResponseBaseOfReport {
  result: Report
  status: ResponseStatus!
}

type ResponseBaseOfReportBoxDto {
  result: ReportBoxDto
  status: ResponseStatus!
}

type ResponseBaseOfRole {
  result: Role
  status: ResponseStatus!
}

type ResponseBaseOfSettings {
  result: Settings
  status: ResponseStatus!
}

type ResponseBaseOfSkill {
  result: Skill
  status: ResponseStatus!
}

type ResponseBaseOfSkillCategory {
  result: SkillCategory
  status: ResponseStatus!
}

type ResponseBaseOfSkillLevelDto {
  result: SkillLevelDto
  status: ResponseStatus!
}

type ResponseBaseOfSkillQuestion {
  result: SkillQuestion
  status: ResponseStatus!
}

type ResponseBaseOfTopic {
  result: Topic
  status: ResponseStatus!
}

type ResponseBaseOfUser {
  result: User
  status: ResponseStatus!
}

type ResponseBaseOfUserBadge {
  result: UserBadge
  status: ResponseStatus!
}

type ResponseBaseOfUserCertificate {
  result: UserCertificate
  status: ResponseStatus!
}

type ResponseBaseOfUserCourse {
  result: UserCourse
  status: ResponseStatus!
}

type ResponseBaseOfUserCourseHistory {
  result: UserCourseHistory
  status: ResponseStatus!
}

type ResponseBaseOfUserEducation {
  result: UserEducation
  status: ResponseStatus!
}

type ResponseBaseOfUserFavoriteJob {
  result: UserFavoriteJob
  status: ResponseStatus!
}

type ResponseBaseOfUserInterviewQuestion {
  result: UserInterviewQuestion
  status: ResponseStatus!
}

type ResponseBaseOfUserProfessionalSkill {
  result: UserProfessionalSkill
  status: ResponseStatus!
}

type ResponseBaseOfUserSkill {
  result: UserSkill
  status: ResponseStatus!
}

type ResponseBaseOfUserWorkExperience {
  result: UserWorkExperience
  status: ResponseStatus!
}

enum ResponseStatus {
  SUCCESS
  NOT_FOUND
  UNKNOWN_ERROR
  NOT_ENOUGH_DATA
  AUTHENTICATION_FAILED
  USER_NOT_FOUND
  ALREADY_EXIST
  SELF_MESSAGE_NOT_ALLOWED
  ALREADY_REMOVED
  NOT_ALLOWED
  ALREADY_FOLLOWED
  SAME_ID
  POST_NOT_FOUND
  COMMENT_NOT_FOUND
  INVALID_TIME_RANGE
  TIME_CONFLICT
  INVALID_TIME_SYNTAX
  DIFFRENET_IDS
  HOST_NOT_FOUND
  ACCESS_DENIED
  FAILED
  USERNAME_ALREADY_EXIST
  DURATION_IS_REQUIRED
  ACTIVE_BIDS_EXIST
  IN_PROGRESS_BID_EXIST
  SELF_BID_NOT_ALLOWED
  USER_IS_NOT_ACTIVE
  SESSION_NOT_FOUND
  STRIPE_ACCOUNT_NOT_EXIST
  USER_DONT_HAVE_STRIPE_ACCOUNT
  USER_DONT_HAVE_ENOUGH_BALANCE_IN_STRIP_ACCOUNT
  PLAT_FORM_DONT_HAVE_ENOUGH_BALANCE_IN_STRIP_ACCOUNT
  IN_VALID_AMOUNT_FOR_STRIPE_PAYMENT
  FAILED_PAYMENT
  FAILED_TO_WIDTHRAW
  HUDUR_ACCOUNT_NEEDS_TO_HAVE_TRANSFER_ENABLED
}

type Role {
  title: String
  iconUrl: String
  userRoles: [UserRole]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type RoleCollectionSegment {
  items: [Role]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input RoleFilterInput {
  and: [RoleFilterInput!]
  or: [RoleFilterInput!]
  title: StringOperationFilterInput
  iconUrl: StringOperationFilterInput
  userRoles: ListFilterInputTypeOfUserRoleFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input RoleSortInput {
  title: SortEnumType
  iconUrl: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input SetStatusJobRequestInput {
  status: JobStatus!
  id: Int!
}

type Settings {
  firstPercent: Int!
  secondPercent: Int!
  thirdPercent: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type SettingsCollectionSegment {
  items: [Settings]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input SettingsFilterInput {
  and: [SettingsFilterInput!]
  or: [SettingsFilterInput!]
  firstPercent: ComparableInt32OperationFilterInput
  secondPercent: ComparableInt32OperationFilterInput
  thirdPercent: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input SettingsInput {
  firstPercent: Int!
  secondPercent: Int!
  thirdPercent: Int!
}

input SettingsSortInput {
  firstPercent: SortEnumType
  secondPercent: SortEnumType
  thirdPercent: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

enum ShowStatus {
  ACTIVE
  INACTIVE
}

input ShowStatusOperationFilterInput {
  eq: ShowStatus
  neq: ShowStatus
  in: [ShowStatus!]
  nin: [ShowStatus!]
}

type SingleResponseBaseOfComment {
  result: Comment
  status: ResponseStatus!
}

type SingleResponseBaseOfConsultForm {
  result: ConsultForm
  status: ResponseStatus!
}

type SingleResponseBaseOfInterviewCategory {
  result: InterviewCategory
  status: ResponseStatus!
}

type SingleResponseBaseOfInterviewQuestion {
  result: InterviewQuestion
  status: ResponseStatus!
}

type SingleResponseBaseOfJobRequest {
  result: JobRequest
  status: ResponseStatus!
}

type SingleResponseBaseOfJobSkill {
  result: JobSkill
  status: ResponseStatus!
}

type SingleResponseBaseOfLesson {
  result: Lesson
  status: ResponseStatus!
}

type SingleResponseBaseOfSettings {
  result: Settings
  status: ResponseStatus!
}

type SingleResponseBaseOfSkill {
  result: Skill
  status: ResponseStatus!
}

type SingleResponseBaseOfSkillCategory {
  result: SkillCategory
  status: ResponseStatus!
}

type SingleResponseBaseOfSkillQuestion {
  result: SkillQuestion
  status: ResponseStatus!
}

type SingleResponseBaseOfTopic {
  result: Topic
  status: ResponseStatus!
}

type SingleResponseBaseOfUser {
  result: User
  status: ResponseStatus!
}

type Skill {
  title: String
  iconUrl: String
  isToday: Boolean!
  updateDate: DateTime!
  skillCategoryId: Int!
  skillCategory: SkillCategory
  userSkills: [UserSkill]
  jobSkills: [JobSkill]
  skillQuestions: [SkillQuestion]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type SkillCategory {
  title: String
  rate: Int!
  iconUrl: String
  skills: [Skill]
  lessons: [Lesson]
  userCourses: [UserCourse]
  comments: [Comment]
  userCourseHistories: [UserCourseHistory]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type SkillCategoryCollectionSegment {
  items: [SkillCategory]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input SkillCategoryFilterInput {
  and: [SkillCategoryFilterInput!]
  or: [SkillCategoryFilterInput!]
  title: StringOperationFilterInput
  rate: ComparableInt32OperationFilterInput
  iconUrl: StringOperationFilterInput
  skills: ListFilterInputTypeOfSkillFilterInput
  lessons: ListFilterInputTypeOfLessonFilterInput
  userCourses: ListFilterInputTypeOfUserCourseFilterInput
  comments: ListFilterInputTypeOfCommentFilterInput
  userCourseHistories: ListFilterInputTypeOfUserCourseHistoryFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input SkillCategoryInput {
  title: String
  iconUrl: String
}

input SkillCategorySortInput {
  title: SortEnumType
  rate: SortEnumType
  iconUrl: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type SkillCollectionSegment {
  items: [Skill]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SkillDto {
  id: Int!
  title: String
  iconUrl: String
  categoryTitle: String
}

type SkillDtoCollectionSegment {
  items: [SkillDto]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input SkillDtoFilterInput {
  and: [SkillDtoFilterInput!]
  or: [SkillDtoFilterInput!]
  id: ComparableInt32OperationFilterInput
  title: StringOperationFilterInput
  iconUrl: StringOperationFilterInput
  categoryTitle: StringOperationFilterInput
}

input SkillDtoSortInput {
  id: SortEnumType
  title: SortEnumType
  iconUrl: SortEnumType
  categoryTitle: SortEnumType
}

input SkillFilterInput {
  and: [SkillFilterInput!]
  or: [SkillFilterInput!]
  title: StringOperationFilterInput
  iconUrl: StringOperationFilterInput
  isToday: BooleanOperationFilterInput
  updateDate: ComparableDateTimeOperationFilterInput
  skillCategoryId: ComparableInt32OperationFilterInput
  skillCategory: SkillCategoryFilterInput
  userSkills: ListFilterInputTypeOfUserSkillFilterInput
  jobSkills: ListFilterInputTypeOfJobSkillFilterInput
  skillQuestions: ListFilterInputTypeOfSkillQuestionFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input SkillInput {
  title: String
  iconUrl: String
  skillCategoryId: Int!
}

enum SkillLevel {
  LOW
  MEDIUM
  HIGH
}

type SkillLevelDto {
  level: SkillLevel!
}

type SkillQuestion {
  title: String
  skillId: Int!
  skill: Skill
  skillQuestionOptions: [SkillQuestionOption]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type SkillQuestionCollectionSegment {
  items: [SkillQuestion]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input SkillQuestionFilterInput {
  and: [SkillQuestionFilterInput!]
  or: [SkillQuestionFilterInput!]
  title: StringOperationFilterInput
  skillId: ComparableInt32OperationFilterInput
  skill: SkillFilterInput
  skillQuestionOptions: ListFilterInputTypeOfSkillQuestionOptionFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input SkillQuestionInput {
  title: String
  skillId: Int!
  options: [SkillQuestionOptionInput]
}

type SkillQuestionOption {
  title: String
  isCorrect: Boolean!
  skillQuestionId: Int!
  skillQuestion: SkillQuestion
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

input SkillQuestionOptionFilterInput {
  and: [SkillQuestionOptionFilterInput!]
  or: [SkillQuestionOptionFilterInput!]
  title: StringOperationFilterInput
  isCorrect: BooleanOperationFilterInput
  skillQuestionId: ComparableInt32OperationFilterInput
  skillQuestion: SkillQuestionFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input SkillQuestionOptionInput {
  title: String
  isCorrect: Boolean!
}

input SkillQuestionSortInput {
  title: SortEnumType
  skillId: SortEnumType
  skill: SkillSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input SkillSortInput {
  title: SortEnumType
  iconUrl: SortEnumType
  isToday: SortEnumType
  updateDate: SortEnumType
  skillCategoryId: SortEnumType
  skillCategory: SkillCategorySortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

enum SortEnumType {
  ASC
  DESC
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

type Subscription {
  messageAdded(userId: Int!): Messages
}

enum TimeType {
  DAYS
  WEEK
  MONTH
  YEAR
}

type Topic {
  title: String
  fileUrl: String
  isMain: Boolean!
  description: String
  lesson: Lesson
  lessonId: Int!
  userTopicVieweds: [UserTopicViewed]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type TopicCollectionSegment {
  items: [Topic]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input TopicFilterInput {
  and: [TopicFilterInput!]
  or: [TopicFilterInput!]
  title: StringOperationFilterInput
  fileUrl: StringOperationFilterInput
  isMain: BooleanOperationFilterInput
  description: StringOperationFilterInput
  lesson: LessonFilterInput
  lessonId: ComparableInt32OperationFilterInput
  userTopicVieweds: ListFilterInputTypeOfUserTopicViewedFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input TopicInput {
  title: String
  fileUrl: String
  isMain: Boolean!
  lessonId: Int!
  description: String
}

input TopicSortInput {
  title: SortEnumType
  fileUrl: SortEnumType
  isMain: SortEnumType
  description: SortEnumType
  lesson: LessonSortInput
  lessonId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input UpdateAdminInput {
  firstName: String
  lastName: String
  phoneNumber: String
  roleIds: [Int!]
}

input UpdateCommentInput {
  status: CommentStatus!
  replyText: String
}

type User {
  firstName: String
  lastName: String
  pictureUrl: String
  email: String
  age: Int!
  country: String
  address: String
  city: String
  postalCode: String
  cVFileUrl: String
  userType: UserType!
  activeStatus: ActiveStatus!
  rejectReason: String
  lastSeen: DateTime!
  point: Int!
  phoneNumber: String
  userEducations: [UserEducation]
  userWorkExperiences: [UserWorkExperience]
  userSkills: [UserSkill]
  userProfessionalSkills: [UserProfessionalSkill]
  userCertificates: [UserCertificate]
  comments: [Comment]
  userCourses: [UserCourse]
  userCourseHistories: [UserCourseHistory]
  jobRequests: [JobRequest]
  userFavoriteJobs: [UserFavoriteJob]
  userInterviewQuestions: [UserInterviewQuestion]
  consultForms: [ConsultForm]
  userTopicVieweds: [UserTopicViewed]
  userRoles: [UserRole]
  externalId: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserBadge {
  rightCount: Int!
  wrongCount: Int!
  score: Int!
  isBadge: Boolean!
  skill: Skill
  skillId: Int!
  user: User
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserBadgeCollectionSegment {
  items: [UserBadge]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserBadgeFilterInput {
  and: [UserBadgeFilterInput!]
  or: [UserBadgeFilterInput!]
  rightCount: ComparableInt32OperationFilterInput
  wrongCount: ComparableInt32OperationFilterInput
  score: ComparableInt32OperationFilterInput
  isBadge: BooleanOperationFilterInput
  skill: SkillFilterInput
  skillId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserBadgeInput {
  rightCount: Int!
  wrongCount: Int!
  skillId: Int!
}

input UserBadgeSortInput {
  rightCount: SortEnumType
  wrongCount: SortEnumType
  score: SortEnumType
  isBadge: SortEnumType
  skill: SkillSortInput
  skillId: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type UserCertificate {
  fileUrl: String
  user: User
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserCertificateCollectionSegment {
  items: [UserCertificate]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserCertificateFilterInput {
  and: [UserCertificateFilterInput!]
  or: [UserCertificateFilterInput!]
  fileUrl: StringOperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserCertificateInput {
  fileUrl: String
}

input UserCertificateSortInput {
  fileUrl: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type UserCollectionSegment {
  items: [User]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type UserCourse {
  status: UserCourseStatus!
  user: User
  userId: Int!
  skillCategoryId: Int!
  skillCategory: SkillCategory
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserCourseCollectionSegment {
  items: [UserCourse]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserCourseFilterInput {
  and: [UserCourseFilterInput!]
  or: [UserCourseFilterInput!]
  status: UserCourseStatusOperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  skillCategoryId: ComparableInt32OperationFilterInput
  skillCategory: SkillCategoryFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

type UserCourseHistory {
  skillCategory: SkillCategory
  user: User
  skillCategoryId: Int!
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserCourseHistoryCollectionSegment {
  items: [UserCourseHistory]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserCourseHistoryFilterInput {
  and: [UserCourseHistoryFilterInput!]
  or: [UserCourseHistoryFilterInput!]
  skillCategory: SkillCategoryFilterInput
  user: UserFilterInput
  skillCategoryId: ComparableInt32OperationFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserCourseHistoryInput {
  skillCategoryId: Int!
  userId: Int!
}

input UserCourseHistorySortInput {
  skillCategory: SkillCategorySortInput
  user: UserSortInput
  skillCategoryId: SortEnumType
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input UserCourseInput {
  status: UserCourseStatus
  skillCategoryId: Int
  userId: Int
}

input UserCourseSortInput {
  status: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  skillCategoryId: SortEnumType
  skillCategory: SkillCategorySortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

enum UserCourseStatus {
  IN_PROGRESS
  COMPLETED
}

input UserCourseStatusOperationFilterInput {
  eq: UserCourseStatus
  neq: UserCourseStatus
  in: [UserCourseStatus!]
  nin: [UserCourseStatus!]
}

type UserEducation {
  level: String
  field: String
  university: String
  country: String
  city: String
  from: DateTime
  to: DateTime
  user: User
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserEducationCollectionSegment {
  items: [UserEducation]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserEducationFilterInput {
  and: [UserEducationFilterInput!]
  or: [UserEducationFilterInput!]
  level: StringOperationFilterInput
  field: StringOperationFilterInput
  university: StringOperationFilterInput
  country: StringOperationFilterInput
  city: StringOperationFilterInput
  from: ComparableNullableOfDateTimeOperationFilterInput
  to: ComparableNullableOfDateTimeOperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserEducationInput {
  level: String
  field: String
  university: String
  country: String
  city: String
  from: DateTime
  to: DateTime
}

input UserEducationSortInput {
  level: SortEnumType
  field: SortEnumType
  university: SortEnumType
  country: SortEnumType
  city: SortEnumType
  from: SortEnumType
  to: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type UserFavoriteJob {
  job: Job
  user: User
  jobId: Int!
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserFavoriteJobCollectionSegment {
  items: [UserFavoriteJob]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserFavoriteJobFilterInput {
  and: [UserFavoriteJobFilterInput!]
  or: [UserFavoriteJobFilterInput!]
  job: JobFilterInput
  user: UserFilterInput
  jobId: ComparableInt32OperationFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserFavoriteJobInput {
  jobId: Int!
}

input UserFavoriteJobSortInput {
  job: JobSortInput
  user: UserSortInput
  jobId: SortEnumType
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  pictureUrl: StringOperationFilterInput
  email: StringOperationFilterInput
  age: ComparableInt32OperationFilterInput
  country: StringOperationFilterInput
  address: StringOperationFilterInput
  city: StringOperationFilterInput
  postalCode: StringOperationFilterInput
  cVFileUrl: StringOperationFilterInput
  userType: UserTypeOperationFilterInput
  activeStatus: ActiveStatusOperationFilterInput
  rejectReason: StringOperationFilterInput
  lastSeen: ComparableDateTimeOperationFilterInput
  point: ComparableInt32OperationFilterInput
  phoneNumber: StringOperationFilterInput
  userEducations: ListFilterInputTypeOfUserEducationFilterInput
  userWorkExperiences: ListFilterInputTypeOfUserWorkExperienceFilterInput
  userSkills: ListFilterInputTypeOfUserSkillFilterInput
  userProfessionalSkills: ListFilterInputTypeOfUserProfessionalSkillFilterInput
  userCertificates: ListFilterInputTypeOfUserCertificateFilterInput
  comments: ListFilterInputTypeOfCommentFilterInput
  userCourses: ListFilterInputTypeOfUserCourseFilterInput
  userCourseHistories: ListFilterInputTypeOfUserCourseHistoryFilterInput
  jobRequests: ListFilterInputTypeOfJobRequestFilterInput
  userFavoriteJobs: ListFilterInputTypeOfUserFavoriteJobFilterInput
  userInterviewQuestions: ListFilterInputTypeOfUserInterviewQuestionFilterInput
  consultForms: ListFilterInputTypeOfConsultFormFilterInput
  userTopicVieweds: ListFilterInputTypeOfUserTopicViewedFilterInput
  userRoles: ListFilterInputTypeOfUserRoleFilterInput
  externalId: StringOperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserInput {
  firstName: String
  lastName: String
  pictureUrl: String
  age: Int
  country: String
  address: String
  city: String
  postalCode: String
  cVFileUrl: String
}

type UserInterviewQuestion {
  videoUrl: String
  interviewQuestion: InterviewQuestion
  interviewQuestionId: Int!
  user: User
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserInterviewQuestionCollectionSegment {
  items: [UserInterviewQuestion]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserInterviewQuestionFilterInput {
  and: [UserInterviewQuestionFilterInput!]
  or: [UserInterviewQuestionFilterInput!]
  videoUrl: StringOperationFilterInput
  interviewQuestion: InterviewQuestionFilterInput
  interviewQuestionId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserInterviewQuestionInput {
  videoUrl: String
  interviewQuestionId: Int!
}

input UserInterviewQuestionSortInput {
  videoUrl: SortEnumType
  interviewQuestion: InterviewQuestionSortInput
  interviewQuestionId: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type UserProfessionalSkill {
  title: String
  user: User
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserProfessionalSkillCollectionSegment {
  items: [UserProfessionalSkill]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserProfessionalSkillFilterInput {
  and: [UserProfessionalSkillFilterInput!]
  or: [UserProfessionalSkillFilterInput!]
  title: StringOperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserProfessionalSkillInput {
  title: String
}

input UserProfessionalSkillSortInput {
  title: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type UserRole {
  user: User
  userId: Int!
  roleId: Int!
  role: Role
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

input UserRoleFilterInput {
  and: [UserRoleFilterInput!]
  or: [UserRoleFilterInput!]
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  roleId: ComparableInt32OperationFilterInput
  role: RoleFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

type UserSkill {
  skill: Skill
  user: User
  skillId: Int!
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserSkillCollectionSegment {
  items: [UserSkill]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserSkillFilterInput {
  and: [UserSkillFilterInput!]
  or: [UserSkillFilterInput!]
  skill: SkillFilterInput
  user: UserFilterInput
  skillId: ComparableInt32OperationFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserSkillInput {
  type: Int
  skillId: Int
  userId: Int
}

input UserSkillSortInput {
  skill: SkillSortInput
  user: UserSortInput
  skillId: SortEnumType
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

input UserSortInput {
  firstName: SortEnumType
  lastName: SortEnumType
  pictureUrl: SortEnumType
  email: SortEnumType
  age: SortEnumType
  country: SortEnumType
  address: SortEnumType
  city: SortEnumType
  postalCode: SortEnumType
  cVFileUrl: SortEnumType
  userType: SortEnumType
  activeStatus: SortEnumType
  rejectReason: SortEnumType
  lastSeen: SortEnumType
  point: SortEnumType
  phoneNumber: SortEnumType
  externalId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

type UserTopicViewed {
  topic: Topic
  topicId: Int!
  user: User
  userId: Int!
  isSaved: Boolean!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

input UserTopicViewedFilterInput {
  and: [UserTopicViewedFilterInput!]
  or: [UserTopicViewedFilterInput!]
  topic: TopicFilterInput
  topicId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  isSaved: BooleanOperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

enum UserType {
  ADMIN
  CLIENT
  ADMIN2_LEVEL
}

input UserTypeOperationFilterInput {
  eq: UserType
  neq: UserType
  in: [UserType!]
  nin: [UserType!]
}

type UserWorkExperience {
  jobTitle: String
  companyName: String
  country: String
  city: String
  from: DateTime
  to: DateTime
  isWorking: Boolean!
  user: User
  userId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
}

type UserWorkExperienceCollectionSegment {
  items: [UserWorkExperience]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UserWorkExperienceFilterInput {
  and: [UserWorkExperienceFilterInput!]
  or: [UserWorkExperienceFilterInput!]
  jobTitle: StringOperationFilterInput
  companyName: StringOperationFilterInput
  country: StringOperationFilterInput
  city: StringOperationFilterInput
  from: ComparableNullableOfDateTimeOperationFilterInput
  to: ComparableNullableOfDateTimeOperationFilterInput
  isWorking: BooleanOperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: ComparableDateTimeOperationFilterInput
}

input UserWorkExperienceInput {
  jobTitle: String
  companyName: String
  country: String
  city: String
  from: DateTime
  to: DateTime
  isWorking: Boolean!
}

input UserWorkExperienceSortInput {
  jobTitle: SortEnumType
  companyName: SortEnumType
  country: SortEnumType
  city: SortEnumType
  from: SortEnumType
  to: SortEnumType
  isWorking: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
}

